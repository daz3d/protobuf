<?xml version="1.0" encoding="utf-8"?>
<project name="Protocol Buffers" default="publish">
  <description>The build file for Protocol Buffers</description>

  <property  readonly="true" name="product.name" value="Protocol Buffers" />

  <include buildfile="DAZCustom.build" />

  <!-- Operating System properties -->
  <property readonly="true" name="os.platform" value="${operating-system::get-platform(environment::get-operating-system())}" />
  <property readonly="true" name="os.win" value="${os.platform == 'Win32NT'}" />
  <property readonly="true" name="os.mac" value="${not(os.win)}" />
  <property readonly="true" name="os.win.64" value="${environment::variable-exists('PROGRAMW6432')}" />

  <!-- SDK 5 properties -->
  <if test="${not property::exists('compile.sdk5')}">
    <property readonly="true" name="compile.sdk5" value="true" />
    <!-- Defaults to true for this project -->
  </if>
  <if test="${compile.sdk5}">
    <property readonly="true" name="compile.vc.short.version" value="14" />
    <property readonly="true" name="compile.vc.year" value="2015" />
    <property readonly="true" name="sdk.suffix" value="_sdk5" />
    <if test="${os.win}">
      <if test="${not property::exists('msbuild.exe')}">
        <property readonly="true" name="msbuild.exe" value="${path::combine(environment::get-variable('ProgramFiles(x86)'), 'MSBuild/14.0/bin/MSBuild.exe')}" />
      </if>
    </if>
  </if>
  <if test="${not compile.sdk5}">
    <property readonly="true" name="compile.vc.short.version" value="10" />
    <property readonly="true" name="compile.vc.year" value="2010" />
    <property readonly="true" name="sdk.suffix" value="" />
  </if>

  <!-- Source directory and file properties -->
  <property readonly="true" name="project.root.dir" value="${DAZ::RemoveRelativeRefsCombine(project::get-base-directory(), '../../')}" />
  <property readonly="true" name="project.daz.build.root.dir" value="${DAZ::RemoveRelativeRefsCombine(project::get-base-directory(), '../../DAZ3DBuild')}" />
  <property readonly="true" name="project.src.dir" value="${project.root.dir}" />
  <property readonly="true" name="project.tools.dir" value="${path::combine(project.daz.build.root.dir, 'tools')}" />
  <property readonly="true" name="build-number.txt" value="${project::get-base-directory() + '/protobuf-build-number.txt'}" />

  <!-- Build behavior properties -->
  <property readonly="true" name="verbose" value="${property::exists('debug') and debug}" />
  <property readonly="true" name="build.rebuild" value="false" unless="${property::exists('build.rebuild')}" />
  <property readonly="true" name="msbuild.target.switch" value="/t:build" unless="${build.rebuild}" />
  <property readonly="true" name="msbuild.target.switch" value="/t:rebuild" if="${build.rebuild}" />
  <property readonly="true" name="build.os.platform" value="Win" if="${os.win}" />
  <property readonly="true" name="build.os.platform" value="Mac" if="${os.mac}" />

  <!-- Product version properties -->
  <property readonly="true" name="version.major" value="3" />
  <property readonly="true" name="version.minor" value="0" />
  <property readonly="true" name="version.revision" value="0" />
  <property readonly="true" name="version.build.last" value="${DAZ::ReadFileContents(build-number.txt)}" />
  <property readonly="true" name="version.build.inc" value="1" />
  <property readonly="true" name="version.build" value="${int::parse(string::trim(version.build.last)) + int::parse(string::trim(version.build.inc))}" />
  <property readonly="true" name="version" value="${version.major}.${version.minor}.${version.revision}.${version.build}" />
  <property readonly="true" name="version.tag" value="${version.major}_${version.minor}_${version.revision}_${version.build}" />
  <echo message="Building ${project::get-name()}, version ${version}" />

  <!-- Publishing directory properties -->
  <property readonly="false" name="debug.publish.local" value="false" unless="${property::exists('debug.publish.local')}" />
  <if test="${debug.publish.local}">
    <property readonly="true" name="publish.dir" value="${project.daz.build.root.dir}/publish" />
  </if>
  <if test="${not debug.publish.local}">
    <property readonly="true" name="publish.dir" value="\\rubin\builds\Dependencies\Win" if="${os.win}" />
    <property readonly="true" name="publish.dir" value="/Volumes/builds/Dependencies/Mac" if="${os.mac}" />
  </if>
  <if test="${not property::exists('publish.dir')}">
    <fail message="Property publish.dir not set." />
  </if>
  <property readonly="true" name="packaging.dir" value="${project.daz.build.root.dir}/packaging" />

  <property readonly="true" name="protobuf.publish.dir" value="${path::combine(publish.dir,'protobuf')}" />
  <property readonly="true" name="protobuf.packaging.dir" value="${project.daz.build.root.dir}/packaging" />

  <!-- Build configuration properties -->
  <if test="${os.win}">
    <if test="${not property::exists('msbuild.exe')}">
      <property readonly="true" name="msbuild.exe" value="${path::combine(environment::get-variable('windir'), 'Microsoft.NET/Framework/v4.0.30319/msbuild.exe')}" />
    </if>
    <if test="${not file::exists(msbuild.exe)}">
      <fail message="msbuild.exe not found in ${msbuild.exe}.  Set the msbuild.exe property to the full path of msbuild.exe.  This must be set for the build to succeed on Windows." />
    </if>
  </if>

  <property readonly="true" name="protobuf.base.build.dir" value="${project.daz.build.root.dir}/build" />

  <target name="commit-inc-version" description="Records the incremented build number.">
    <stamp-build-number file="${build-number.txt}" number="${version.build}" />
    <exec program="git" commandline="add ${build-number.txt}" verbose="${verbose}" />
    <exec program="git" verbose="${verbose}">
      <arg value="commit" />
      <arg value="-m" />
      <arg value="Protocol Buffers : Implemented : Increment build number" />
    </exec>
    <exec program="git" commandline="tag ${version}" />
    <exec program="git" commandline="push origin ${protobuf.branch}" />
    <exec program="git" commandline="push origin --tags" />
  </target>

  <target name="clean">
    <delete dir="${project.daz.build.root.dir}/build" />
    <delete dir="${project.daz.build.root.dir}/packaging" />
    <delete>
      <fileset basedir="${project.daz.build.root.dir}">
        <include name="*.tar.gz" />
        <include name="*.zip" />
      </fileset>
    </delete>
  </target>

  <target name="publish" description="Publishes packages" depends="package, publish-protobuf" />

  <target name="package" description="Packages staged files for publishing" depends="stage, package-protobuf" />

  <target name="stage" description="Stages build outputs for packaging" depends="compile, stage-protobuf" />

  <target name="compile" description="Compiles source code for staging" depends="compile-protobuf" />

  <target name="publish-protobuf">
    <if test="${not directory::exists(protobuf.publish.dir)}">
      <mkdir dir="${protobuf.publish.dir}" verbose="${verbose}" />
    </if>
    <copy todir="${protobuf.publish.dir}" verbose="${verbose}">
      <fileset basedir="${project.daz.build.root.dir}">
        <include name="protobuf-${version}.zip" />
        <include name="protobuf-${version}.tar.gz" />
      </fileset>
    </copy>
  </target>

  <target name="package-protobuf">
    <if test="${os.win}">
      <zip zipfile="${project.daz.build.root.dir}/protobuf-${version}.zip" verbose="${verbose}">
        <fileset basedir="${packaging.dir}" failonempty="true">
          <include name="**" />
        </fileset>
      </zip>
    </if>
    <if test="${os.mac}">
      <tar destfile="${project.daz.build.root.dir}/protobuf-${version}.tar.gz" compression="GZip">
        <fileset basedir="${packaging.dir}" failonempty="true">
          <include name="**" />
        </fileset>
      </tar>
    </if>
  </target>

  <target name="stage-protobuf" >
    <mkdir dir="${protobuf.packaging.dir}" verbose="${verbose}" />

    <property name="build.bit.architecture" value="32" />
    <call target="stage-protobuf-platform" />

    <property name="build.bit.architecture" value="64" />
    <call target="stage-protobuf-platform" />
  </target>

  <target name="stage-protobuf-platform">
    <if test="${os.win}">
      <property name="build.platform" value="Win32" if="${build.bit.architecture == '32'}" />
      <property name="build.platform" value="x64" if="${build.bit.architecture == '64'}" />
    </if>
    <if test="${os.mac}">
      <property name="build.platform" value="Mac32" if="${build.bit.architecture == '32'}" />
      <property name="build.platform" value="Mac64" if="${build.bit.architecture == '64'}" />
    </if>

    <property name="protobuf.build.dir" value="${protobuf.base.build.dir}/${build.platform}" />
    <property name="protobuf.platform.packaging.dir" value="${protobuf.packaging.dir}/${build.platform}" />
    <mkdir dir="${protobuf.platform.packaging.dir}" verbose="${verbose}" />

    <property name="build.configuration" value="Debug" />
    <property name="build.solution.configuration" value="Debug" />
    <call target="stage-protobuf-configuration" />

    <property name="build.configuration" value="Release" />
    <property name="build.solution.configuration" value="RelWithDebInfo" />
    <call target="stage-protobuf-configuration" unless="${property::exists('build.quick')}"/>
  </target>

  <target name="stage-protobuf-configuration">
    <property name="build.protobuf.configuration.dir" value="${protobuf.build.dir}/${build.configuration}" />
    <property name="protobuf.configuration.packaging.dir" value="${protobuf.platform.packaging.dir}/${build.configuration}" />
    <mkdir dir="${protobuf.configuration.packaging.dir}" verbose="${verbose}" />

    <copy todir="${protobuf.configuration.packaging.dir}" verbose="${verbose}">
      <fileset basedir="${build.protobuf.configuration.dir}/Install">
        <include name="bin/**"/>
        <include name="lib/**"/>
        <exclude name="include/**" />
      </fileset>
    </copy>

    <if test="${build.configuration=='Release'}">
      <copy todir="${protobuf.packaging.dir}" verbose="${verbose}" if="${build.bit.architecture == '64'}">
        <fileset basedir="${build.protobuf.configuration.dir}/Install">
          <include name="include/**" />
        </fileset>
      </copy>
    </if>
    
    <if test="${os.win}">
      <copy todir="${protobuf.configuration.packaging.dir}/lib" verbose="${verbose}">
        <fileset basedir="${build.protobuf.configuration.dir}/libprotobuf.dir/${build.solution.configuration}">
          <include name="*.pdb"/>
        </fileset>
      </copy>

      <copy todir="${protobuf.configuration.packaging.dir}/lib" verbose="${verbose}">
        <fileset basedir="${build.protobuf.configuration.dir}/libprotobuf-lite.dir/${build.solution.configuration}">
          <include name="*.pdb"/>
        </fileset>
      </copy>

      <copy todir="${protobuf.configuration.packaging.dir}/lib" verbose="${verbose}">
        <fileset basedir="${build.protobuf.configuration.dir}/libprotoc.dir/${build.solution.configuration}">
          <include name="*.pdb"/>
        </fileset>
      </copy>

      <copy todir="${protobuf.configuration.packaging.dir}/bin" verbose="${verbose}">
        <fileset basedir="${build.protobuf.configuration.dir}/${build.solution.configuration}">
          <include name="protoc.pdb"/>
        </fileset>
      </copy>
    </if>
    
  </target>

  <target name="compile-protobuf" >
    <property name="build.bit.architecture" value="32" />
    <call target="compile-protobuf-platform" />

    <property name="build.bit.architecture" value="64" />
    <call target="compile-protobuf-platform" />
  </target>

  <target name="compile-protobuf-platform">
    <if test="${os.win}">
      <property name="build.platform" value="Win32" if="${build.bit.architecture == '32'}" />
      <property name="build.platform" value="x64" if="${build.bit.architecture == '64'}" />
    </if>
    <if test="${os.mac}">
      <property name="build.platform" value="Mac32" if="${build.bit.architecture == '32'}" />
      <property name="build.platform" value="Mac64" if="${build.bit.architecture == '64'}" />
    </if>

    <property name="protobuf.build.dir" value="${protobuf.base.build.dir}/${build.platform}" />
    <mkdir dir="${protobuf.build.dir}" verbose="${verbose}" />
    
    <property name="build.configuration" value="Debug" />
    <property name="build.solution.configuration" value="Debug" />
    <call target="compile-protobuf-configuration" />

    <property name="build.configuration" value="Release" />
    <property name="build.solution.configuration" value="RelWithDebInfo" />
    <call target="compile-protobuf-configuration" unless="${property::exists('build.quick')}"/>
  </target>

  <target name="compile-protobuf-configuration">

    <property name="build.protobuf.configuration.dir" value="${protobuf.build.dir}/${build.configuration}" />
    <delete dir="${build.protobuf.configuration.dir}" if="${directory::exists(build.protobuf.configuration.dir)}" verbose="${verbose}" />
    <mkdir dir="${build.protobuf.configuration.dir}" verbose="${verbose}" />

    <property name="configuration.install.dir" value="${path::combine(build.protobuf.configuration.dir, 'Install')}" />
    
    <if test="${os.win}">
      <exec program="cmake" workingdir="${build.protobuf.configuration.dir}" if="${os.win}" verbose="${verbose}">
        <arg value="-G" />
        <arg value="Visual Studio ${compile.vc.short.version} ${compile.vc.year} Win64" if="${build.platform == 'x64'}" />
        <arg value="Visual Studio ${compile.vc.short.version} ${compile.vc.year}" if="${build.platform == 'Win32'}" />
        <arg value="-Dprotobuf_BUILD_TESTS=OFF" />
        <arg value="-Dprotobuf_MSVC_STATIC_RUNTIME=OFF" />
        <arg value="-Dprotobuf_DEBUG_POSTFIX=&quot;&quot;" />
        <arg value="-DCMAKE_INSTALL_PREFIX=${configuration.install.dir}" />
        <arg value="${project.src.dir}/cmake" />
      </exec>
      
      <exec program="${msbuild.exe}" workingdir="${build.protobuf.configuration.dir}" verbose="${verbose}">
        <arg value="/nologo" />
        <arg value="protobuf.sln" />
        <arg value="${msbuild.target.switch}" />
        <arg value="/property:Configuration=${build.solution.configuration}" />
        <arg value="/property:Platform=${build.platform}" />
      </exec>
      
      <exec program="${msbuild.exe}" workingdir="${build.protobuf.configuration.dir}" verbose="${verbose}">
        <arg value="/nologo" />
        <arg value="${msbuild.target.switch}" />
        <arg value="INSTALL.vcxproj" />
        <arg value="/property:Configuration=${build.solution.configuration}" />
        <arg value="/property:Platform=${build.platform}" />
      </exec>
    </if>

    <if test="${os.mac}">
      <exec program="cmake" workingdir="${build.protobuf.configuration.dir}" verbose="${verbose}" >
        <arg value="-G" />
        <arg value="Unix Makefiles" />
        <arg value="-DCMAKE_BUILD_TYPE=${build.configuration}" />
        <arg value="-DCMAKE_OSX_ARCHITECTURES=i386" if="${build.bit.architecture == '32'}" />
        <arg value="-DCMAKE_OSX_ARCHITECTURES=x86_64" if="${build.bit.architecture == '64'}" />
        <arg value="-DCMAKE_OSX_DEPLOYMENT_TARGET=10.5" />
        <arg value="-Dprotobuf_BUILD_TESTS=OFF" />
        <arg value="-Dprotobuf_DEBUG_POSTFIX=&quot;&quot;" />
        <arg value="-DCMAKE_INSTALL_PREFIX=${configuration.install.dir}" />
        <arg value="${project.src.dir}/cmake" />
      </exec>
      
      <exec program="make" workingdir="${build.protobuf.configuration.dir}" verbose="${verbose}">
        <arg value="-j" />
        <arg value="8" />
      </exec>
   
      <exec program="make" workingdir="${build.protobuf.configuration.dir}" verbose="${verbose}">
        <arg value="install" />
      </exec>
      
    </if>
  </target>

</project>
